(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>c});var a=r(537),n=r.n(a),o=r(645),i=r.n(o)()(n());i.push([e.id,".container {\n  min-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.gameBoard {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 35vw;\n  aspect-ratio: 1/1;\n  border-top: 0.1px solid black;\n  border-left: 0.1px solid black;\n}\n\n.square {\n  border-right: 0.1px solid black;\n  border-bottom: 0.1px solid black;\n}\n\n.missed {\n    background-color: aquamarine;\n}\n\n.container .hit {\n    background-color: red;\n}\n\n.carrier, .battleship, .submarine, .destroyer, .patrolBoat {\n    background-color: blue;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,WAAW;EACX,iBAAiB;EACjB,6BAA6B;EAC7B,8BAA8B;AAChC;;AAEA;EACE,+BAA+B;EAC/B,gCAAgC;AAClC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:[".container {\n  min-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.gameBoard {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 35vw;\n  aspect-ratio: 1/1;\n  border-top: 0.1px solid black;\n  border-left: 0.1px solid black;\n}\n\n.square {\n  border-right: 0.1px solid black;\n  border-bottom: 0.1px solid black;\n}\n\n.missed {\n    background-color: aquamarine;\n}\n\n.container .hit {\n    background-color: red;\n}\n\n.carrier, .battleship, .submarine, .destroyer, .patrolBoat {\n    background-color: blue;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",a=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),a&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),a&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,a,n,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);a&&i[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),n&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=n):p[4]="".concat(n)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(n," */"),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,a=0;a<t.length;a++)if(t[a].identifier===e){r=a;break}return r}function a(e,a){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],l=a.base?s[0]+a.base:s[0],p=o[l]||0,d="".concat(l," ").concat(p);o[l]=p+1;var u=r(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var f=n(h,a);a.byIndex=c,t.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function n(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,n){var o=a(e=e||[],n=n||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=r(o[i]);t[c].references--}for(var s=a(e,n),l=0;l<o.length;l++){var p=r(o[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=s}}},569:e=>{var t={};e.exports=function(e,r){var a=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var a="";r.supports&&(a+="@supports (".concat(r.supports,") {")),r.media&&(a+="@media ".concat(r.media," {"));var n=void 0!==r.layer;n&&(a+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),a+=r.css,n&&(a+="}"),r.media&&(a+="}"),r.supports&&(a+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),a=r(795),n=r.n(a),o=r(569),i=r.n(o),c=r(565),s=r.n(c),l=r(216),p=r.n(l),d=r(589),u=r.n(d),h=r(426),f={};f.styleTagTransform=u(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=n(),f.insertStyleElement=p(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const m=(e,t)=>{const r=Array(t);for(let e=0;e<r.length;e++)r[e]={position:e,status:"good"};const a=r;return{title:e,length:t,shipHealth:a,hit:e=>{a[e].status="hit"},isSunk:()=>a.every((e=>{if("hit"==e.status)return!0}))}},A=()=>{const e=Array(100);for(let t=0;t<e.length;t++){let r=t,a=t;const n=Math.floor(t/10);t>9&&(r=t-10*n),t>0&&(a=n),e[t]={occupied:"no",attacked:"no",X:r,Y:a}}const t=e,r=m("carrier",5),a=m("battleship",4),n=m("destroyer",3),o=m("submarine",3),i=m("patrolBoat",2);return{gameBoard:t,carrier:r,battleship:a,destroyer:n,submarine:o,patrolBoat:i,placeShip:(e,r)=>{const a=t.slice(r,r+e.length);if(!0!==a.every((e=>{if(e.Y===a[0].Y)return!0}))||!0!==(()=>{if(a.length===e.length)return!0})()||!0!==a.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((t=>t.occupied=e)),t.splice(r,e.length,...e.shipHealth)},placeShipVertical:(e,r)=>{const a=Array(e.length);let n=r;for(let e=0;e<a.length;e++)a[e]=t[n],n+=10;const o=a;if(!0!==o.every((e=>void 0!==e))||!0!==o.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((t=>t.occupied=e));for(let a=0;a<e.shipHealth.length;a++)r<=99&&(t[r]=e.shipHealth[a],r+=10)},receiveAttack:e=>{if("no"===t[e].attacked)t[e].attacked="yes";else{if("yes"===t[e].attacked)return!1;if("no"===t[e].occupied||"good"!==t[e].status)return!1;{const r=t[e].position;t[e].occupied.hit(r)}}},gameOverCheck:()=>!0===r.isSunk()&&!0===a.isSunk()&&!0===n.isSunk()&&!0===o.isSunk()&&!0===i.isSunk()}},g=(()=>{const e=A(),t=t=>e.gameBoard.filter((e=>e.occupied===t)).length>0;return{active:!0,gameBoard:e,placeShip:(r,a)=>{let n=a;if("horizontal"===n)if(!0!==t(e.carrier))e.placeShip(e.carrier,r);else if(!0!==t(e.battleship))e.placeShip(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShip(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShip(e.submarine,r);else{if(!0===t(e.patrolBoat))return;e.placeShip(e.patrolBoat,r)}if("vertical"===n)if(!0!==t(e.carrier))e.placeShipVertical(e.carrier,r);else if(!0!==t(e.battleship))e.placeShipVertical(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShipVertical(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShipVertical(e.submarine,r);else{if(!0===t(e.patrolBoat))return;e.placeShipVertical(e.patrolBoat,r)}},attack:(e,t)=>{e.receiveAttack(t)}}})(),b=(()=>{const e=A(),t=t=>e.gameBoard.filter((e=>e.occupied===t)).length>0,r=e=>Math.floor(Math.random()*e),a=(r,a)=>{let n=a;if(0===n)if(!0!==t(e.carrier))e.placeShip(e.carrier,r);else if(!0!==t(e.battleship))e.placeShip(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShip(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShip(e.submarine,r);else{if(!0===t(e.patrolBoat))return!1;e.placeShip(e.patrolBoat,r)}if(1===n)if(!0!==t(e.carrier))e.placeShipVertical(e.carrier,r);else if(!0!==t(e.battleship))e.placeShipVertical(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShipVertical(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShipVertical(e.submarine,r);else{if(!0===t(e.patrolBoat))return!1;e.placeShipVertical(e.patrolBoat,r)}};let n=!0;const o=(e,t)=>{n=!1===e.receiveAttack(t)};return{active:!0,gameBoard:e,randomPlaceShip:()=>{for(;!1===t(e.patrolBoat);)a(r(100),r(2))},randomAttack:e=>{do{o(e,r(100)),console.log("loop")}while(!0===n)}}})(),v=(()=>{const e=document.querySelector(".container"),t=document.createElement("div");return t.classList.add("gameBoard"),{render:r=>{for(let e=0;e<r.length;e++){const r=document.createElement("div");r.setAttribute("id",e),r.classList.add("square"),t.appendChild(r)}e.appendChild(t)},renderPlayerShips:e=>{for(let t=0;t<e.gameBoard.length;t++){const r=document.getElementById(t);e.gameBoard[t].occupied===e.carrier&&r.classList.add("carrier"),e.gameBoard[t].occupied===e.battleship&&r.classList.add("battleship"),e.gameBoard[t].occupied===e.destroyer&&r.classList.add("destroyer"),e.gameBoard[t].occupied===e.submarine&&r.classList.add("submarine"),e.gameBoard[t].occupied===e.patrolBoat&&r.classList.add("patrolBoat")}},renderHit:e=>{for(let t=0;t<e.length;t++){const r=document.getElementById(t);"yes"===e[t].attacked?r.classList.add("missed"):"hit"===e[t].status&&r.classList.add("hit")}}}})();g.placeShip(10,"horizontal"),g.placeShip(20,"horizontal"),g.placeShip(31,"vertical"),g.placeShip(42,"vertical"),g.placeShip(55,"horizontal"),b.randomPlaceShip(),g.gameBoard.receiveAttack(9),b.randomAttack(g.gameBoard),v.render(g.gameBoard.gameBoard),v.renderPlayerShips(g.gameBoard),v.renderHit(g.gameBoard.gameBoard),console.log(g.gameBoard.gameBoard)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,