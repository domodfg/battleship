(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>c});var a=r(537),o=r.n(a),i=r(645),n=r.n(i)()(o());n.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const c=n},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",a=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),a&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),a&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,a,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var n={};if(a)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(n[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);a&&n[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(o," */"),n=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(n).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,a=0;a<t.length;a++)if(t[a].identifier===e){r=a;break}return r}function a(e,a){for(var i={},n=[],c=0;c<e.length;c++){var s=e[c],l=a.base?s[0]+a.base:s[0],p=i[l]||0,u="".concat(l," ").concat(p);i[l]=p+1;var f=r(u),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var d=o(h,a);a.byIndex=c,t.splice(c,0,{identifier:u,updater:d,references:1})}n.push(u)}return n}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=a(e=e||[],o=o||{});return function(e){e=e||[];for(var n=0;n<i.length;n++){var c=r(i[n]);t[c].references--}for(var s=a(e,o),l=0;l<i.length;l++){var p=r(i[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}i=s}}},569:e=>{var t={};e.exports=function(e,r){var a=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var a="";r.supports&&(a+="@supports (".concat(r.supports,") {")),r.media&&(a+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(a+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),a+=r.css,o&&(a+="}"),r.media&&(a+="}"),r.supports&&(a+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={id:a,exports:{}};return e[a](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),a=r(795),o=r.n(a),i=r(569),n=r.n(i),c=r(565),s=r.n(c),l=r(216),p=r.n(l),u=r(589),f=r.n(u),h=r(426),d={};d.styleTagTransform=f(),d.setAttributes=s(),d.insert=n().bind(null,"head"),d.domAPI=o(),d.insertStyleElement=p(),t()(h.Z,d),h.Z&&h.Z.locals&&h.Z.locals;const v=(e,t)=>{const r=Array(t);for(let e=0;e<r.length;e++)r[e]={position:e,status:"good"};const a=r;return{title:e,length:t,shipHealth:a,hit:e=>{a[e].status="hit"},isSunk:()=>a.every((e=>{if("hit"==e.status)return!0}))}},m=()=>{const e=Array(100);for(let t=0;t<e.length;t++){let r=t,a=t;const o=Math.floor(t/10);t>9&&(r=t-10*o),t>0&&(a=o),e[t]={occupied:"no",attacked:"no",X:r,Y:a}}const t=e,r=v("carrier",5),a=v("battleship",4),o=v("destroyer",3),i=v("submarine",3),n=v("patrolBoat",2);return{gameBoard:t,carrier:r,battleship:a,destroyer:o,submarine:i,patrolBoat:n,placeShip:(e,r)=>{const a=t.slice(r,r+e.length);if(!0!==a.every((e=>{if(e.Y===a[0].Y)return!0}))||!0!==(()=>{if(a.length===e.length)return!0})()||!0!==a.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((t=>t.occupied=e)),t.splice(r,e.length,...e.shipHealth)},placeShipVertical:(e,r)=>{const a=Array(e.length);let o=r;for(let e=0;e<a.length;e++)a[e]=t[o],o+=10;const i=a;if(!0!==i.every((e=>void 0!==e))||!0!==i.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((t=>t.occupied=e));for(let a=0;a<e.shipHealth.length;a++)r<=99&&(t[r]=e.shipHealth[a],r+=10)},receiveAttack:e=>{if("no"===t[e].attacked)t[e].attacked="yes";else{if("yes"===t[e].attacked)return!1;if("no"===t[e].occupied||"good"!==t[e].status)return!1;{const r=t[e].position;t[e].occupied.hit(r)}}},gameOverCheck:()=>!0===r.isSunk()&&!0===a.isSunk()&&!0===o.isSunk()&&!0===i.isSunk()&&!0===n.isSunk()}},y=(()=>{const e=m(),t=t=>e.gameBoard.filter((e=>e.occupied===t)).length>0;return{active:!0,gameBoard:e,placeShip:(r,a)=>{let o=a;if("horizontal"===o)if(!0!==t(e.carrier))e.placeShip(e.carrier,r);else if(!0!==t(e.battleship))e.placeShip(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShip(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShip(e.submarine,r);else{if(!0===t(e.patrolBoat))return;e.placeShip(e.patrolBoat,r)}if("vertical"===o)if(!0!==t(e.carrier))e.placeShipVertical(e.carrier,r);else if(!0!==t(e.battleship))e.placeShipVertical(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShipVertical(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShipVertical(e.submarine,r);else{if(!0===t(e.patrolBoat))return;e.placeShipVertical(e.patrolBoat,r)}},attack:(e,t)=>{e.receiveAttack(t)}}})(),g=(()=>{const e=m(),t=t=>e.gameBoard.filter((e=>e.occupied===t)).length>0,r=e=>Math.floor(Math.random()*e),a=(r,a)=>{let o=a;if(0===o)if(!0!==t(e.carrier))e.placeShip(e.carrier,r);else if(!0!==t(e.battleship))e.placeShip(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShip(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShip(e.submarine,r);else{if(!0===t(e.patrolBoat))return!1;e.placeShip(e.patrolBoat,r)}if(1===o)if(!0!==t(e.carrier))e.placeShipVertical(e.carrier,r);else if(!0!==t(e.battleship))e.placeShipVertical(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShipVertical(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShipVertical(e.submarine,r);else{if(!0===t(e.patrolBoat))return!1;e.placeShipVertical(e.patrolBoat,r)}};let o=!0;const i=(e,t)=>{o=!1===e.receiveAttack(t)};return{active:!0,gameBoard:e,randomPlaceShip:()=>{for(;!1===t(e.patrolBoat);)a(r(100),r(2))},randomAttack:e=>{for(;!0===o;)i(e,r(100)),console.log("loop")}}})();y.placeShip(10,"horizontal"),y.placeShip(20,"horizontal"),y.placeShip(31,"vertical"),y.placeShip(42,"vertical"),y.placeShip(55,"horizontal"),g.randomPlaceShip(),y.gameBoard.receiveAttack(9),g.randomAttack(y.gameBoard),console.log(y.gameBoard.gameBoard)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,