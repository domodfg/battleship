(()=>{"use strict";var e={426:(e,t,r)=>{r.d(t,{Z:()=>c});var a=r(537),i=r.n(a),n=r(645),o=r.n(n)()(i());o.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",a=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),a&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),a&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,a,i,n){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(o[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);a&&o[p[0]]||(void 0!==n&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=n),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),i&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=i):p[4]="".concat(i)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),n="/*# ".concat(i," */"),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([n]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,a=0;a<t.length;a++)if(t[a].identifier===e){r=a;break}return r}function a(e,a){for(var n={},o=[],c=0;c<e.length;c++){var s=e[c],l=a.base?s[0]+a.base:s[0],p=n[l]||0,u="".concat(l," ").concat(p);n[l]=p+1;var h=r(u),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)t[h].references++,t[h].updater(f);else{var d=i(f,a);a.byIndex=c,t.splice(c,0,{identifier:u,updater:d,references:1})}o.push(u)}return o}function i(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,i){var n=a(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<n.length;o++){var c=r(n[o]);t[c].references--}for(var s=a(e,i),l=0;l<n.length;l++){var p=r(n[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}n=s}}},569:e=>{var t={};e.exports=function(e,r){var a=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var a="";r.supports&&(a+="@supports (".concat(r.supports,") {")),r.media&&(a+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(a+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),a+=r.css,i&&(a+="}"),r.media&&(a+="}"),r.supports&&(a+="}");var n=r.sourceMap;n&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(n))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(a){var i=t[a];if(void 0!==i)return i.exports;var n=t[a]={id:a,exports:{}};return e[a](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),a=r(795),i=r.n(a),n=r(569),o=r.n(n),c=r(565),s=r.n(c),l=r(216),p=r.n(l),u=r(589),h=r.n(u),f=r(426),d={};d.styleTagTransform=h(),d.setAttributes=s(),d.insert=o().bind(null,"head"),d.domAPI=i(),d.insertStyleElement=p(),t()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;const v=(e,t)=>{const r=Array(t);for(let e=0;e<r.length;e++)r[e]={position:e,status:"good"};const a=r;return{title:e,length:t,shipHealth:a,hit:e=>{a[e].status="hit"},isSunk:()=>a.every((e=>{if("hit"==e.status)return!0}))}},m=()=>{const e=Array(100);for(let t=0;t<e.length;t++){let r=t,a=t;const i=Math.floor(t/10);t>9&&(r=t-10*i),t>0&&(a=i),e[t]={occupied:"no",attacked:"no",X:r,Y:a}}const t=e,r=v("carrier",5),a=v("battleship",4),i=v("destroyer",3),n=v("submarine",3),o=v("patrolBoat",2);return{gameBoard:t,carrier:r,battleship:a,destroyer:i,submarine:n,patrolBoat:o,placeShip:(e,r)=>{const a=t.slice(r,r+e.length);if(!0!==a.every((e=>{if(e.Y===a[0].Y)return!0}))||!0!==(()=>{if(a.length===e.length)return!0})()||!0!==a.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((t=>t.occupied=e)),t.splice(r,e.length,...e.shipHealth)},placeShipVertical:(e,r)=>{const a=Array(e.length);let i=r;for(let e=0;e<a.length;e++)a[e]=t[i],i+=10;const n=a;if(!0!==n.every((e=>void 0!==e))||!0!==n.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((t=>t.occupied=e));for(let a=0;a<e.shipHealth.length;a++)r<=99&&(t[r]=e.shipHealth[a],r+=10)},receiveAttack:e=>{if("no"!==t[e].occupied){const r=t[e].position;t[e].occupied.hit(r)}"no"===t[e].occupied&&(t[e].attacked="yes")},gameOverCheck:()=>!0===r.isSunk()&&!0===a.isSunk()&&!0===i.isSunk()&&!0===n.isSunk()&&!0===o.isSunk()}},y=(()=>{const e=m(),t=t=>e.gameBoard.filter((e=>e.occupied===t)).length>0;return{active:!0,gameBoard:e,placeShip:(r,a)=>{let i=a;if("horizontal"===i)if(!0!==t(e.carrier))e.placeShip(e.carrier,r);else if(!0!==t(e.battleship))e.placeShip(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShip(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShip(e.submarine,r);else{if(!0===t(e.patrolBoat))return;e.placeShip(e.patrolBoat,r)}if("vertical"===i)if(!0!==t(e.carrier))e.placeShipVertical(e.carrier,r);else if(!0!==t(e.battleship))e.placeShipVertical(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShipVertical(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShipVertical(e.submarine,r);else{if(!0===t(e.patrolBoat))return;e.placeShipVertical(e.patrolBoat,r)}}}})(),S=(()=>{const e=m(),t=t=>e.gameBoard.filter((e=>e.occupied===t)).length>0,r=e=>Math.floor(Math.random()*e),a=(r,a)=>{let i=a;if(0===i)if(!0!==t(e.carrier))e.placeShip(e.carrier,r);else if(!0!==t(e.battleship))e.placeShip(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShip(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShip(e.submarine,r);else{if(!0===t(e.patrolBoat))return!1;e.placeShip(e.patrolBoat,r)}if(1===i)if(!0!==t(e.carrier))e.placeShipVertical(e.carrier,r);else if(!0!==t(e.battleship))e.placeShipVertical(e.battleship,r);else if(!0!==t(e.destroyer))e.placeShipVertical(e.destroyer,r);else if(!0!==t(e.submarine))e.placeShipVertical(e.submarine,r);else{if(!0===t(e.patrolBoat))return!1;e.placeShipVertical(e.patrolBoat,r)}};return{active:!0,gameBoard:e,randomNumber:r,randomPlaceShip:()=>{for(;!1===t(e.patrolBoat);)a(r(100),r(2))}}})();y.placeShip(10,"horizontal"),y.placeShip(20,"horizontal"),y.placeShip(31,"vertical"),y.placeShip(42,"vertical"),y.placeShip(55,"horizontal"),S.randomPlaceShip(),console.log(S.gameBoard.gameBoard)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,