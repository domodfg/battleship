(()=>{"use strict";var e={426:(e,r,t)=>{t.d(r,{Z:()=>f});var a=t(537),n=t.n(a),i=t(645),o=t.n(i),s=t(667),c=t.n(s),l=new URL(t(538),t.b),p=new URL(t(334),t.b),d=new URL(t(850),t.b),u=new URL(t(330),t.b),A=new URL(t(752),t.b),h=o()(n()),g=c()(l),m=c()(p),v=c()(d),b=c()(u),B=c()(A);h.push([e.id,".container {\n  min-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.gameBoard,\n.gameBoard2 {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 35vw;\n  aspect-ratio: 1/1;\n  border-top: 0.1px solid black;\n  border-left: 0.1px solid black;\n}\n\n.square {\n  border-right: 0.1px solid black;\n  border-bottom: 0.1px solid black;\n}\n\n.missed {\n  background-color: aquamarine;\n}\n\n.container .hit {\n  background-color: red;\n}\n\n.carrier {\n  background-image: url("+g+");\n}\n\n.battleship {\n  background-image: url("+m+");\n}\n\n.destroyer {\n  background-image: url("+v+");\n}\n\n.submarine {\n  background-image: url("+b+");\n}\n\n.patrolBoat {\n  background-image: url("+B+");\n}\n\n.carrier,\n.battleship,\n.destroyer,\n.submarine,\n.patrolBoat {\n  background-position: center;\n  background-size: 70%;\n  background-repeat: no-repeat;\n}\n\n.previewCarrier,\n.previewpatrolBoat,\n.previewBattleship,\n.previewDestroyer,\n.previewSubmarine\n {\n  background-color: rgba(0, 144, 211, 0.5);\n  border: none;\n  background-size: 3vw;\n  background-position: left;\n}\n\n.previewCarrierV,\n.previewpatrolBoatV,\n.previewBattleshipV,\n.previewDestroyerV,\n.previewSubmarineV{\n    background-color: rgba(0, 144, 211, 0.5);\n    border: none;\n    background-size: 3vw;\n    background-position: top;\n}\n\n.previewCarrier {\n  width: 500%;\n}\n\n.previewBattleship {\n  width: 400%;\n}\n\n.previewDestroyer {\n  width: 300%;\n}\n\n.previewSubmarine {\n  width: 300%;\n}\n\n.previewpatrolBoat {\n  width: 200%;\n}\n\n.previewCarrierV {\n  height: 500%;\n}\n\n.previewBattleshipV {\n  height: 400%;\n}\n\n.previewDestroyerV {\n  height: 300%;\n}\n\n.previewSubmarineV {\n  height: 300%;\n}\n\n.previewpatrolBoatV {\n  height: 200%;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;;EAEE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,WAAW;EACX,iBAAiB;EACjB,6BAA6B;EAC7B,8BAA8B;AAChC;;AAEA;EACE,+BAA+B;EAC/B,gCAAgC;AAClC;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,yDAA6C;AAC/C;;AAEA;EACE,yDAAuC;AACzC;;AAEA;EACE,yDAAmC;AACrC;;AAEA;EACE,yDAAsC;AACxC;;AAEA;EACE,yDAA4C;AAC9C;;AAEA;;;;;EAKE,2BAA2B;EAC3B,oBAAoB;EACpB,4BAA4B;AAC9B;;AAEA;;;;;;EAME,wCAAwC;EACxC,YAAY;EACZ,oBAAoB;EACpB,yBAAyB;AAC3B;;AAEA;;;;;IAKI,wCAAwC;IACxC,YAAY;IACZ,oBAAoB;IACpB,wBAAwB;AAC5B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd",sourcesContent:[".container {\n  min-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.gameBoard,\n.gameBoard2 {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 35vw;\n  aspect-ratio: 1/1;\n  border-top: 0.1px solid black;\n  border-left: 0.1px solid black;\n}\n\n.square {\n  border-right: 0.1px solid black;\n  border-bottom: 0.1px solid black;\n}\n\n.missed {\n  background-color: aquamarine;\n}\n\n.container .hit {\n  background-color: red;\n}\n\n.carrier {\n  background-image: url(./aircraft-carrier.png);\n}\n\n.battleship {\n  background-image: url(./battleship.png);\n}\n\n.destroyer {\n  background-image: url(./cruise.png);\n}\n\n.submarine {\n  background-image: url(./submarine.png);\n}\n\n.patrolBoat {\n  background-image: url(./maritime-rescue.png);\n}\n\n.carrier,\n.battleship,\n.destroyer,\n.submarine,\n.patrolBoat {\n  background-position: center;\n  background-size: 70%;\n  background-repeat: no-repeat;\n}\n\n.previewCarrier,\n.previewpatrolBoat,\n.previewBattleship,\n.previewDestroyer,\n.previewSubmarine\n {\n  background-color: rgba(0, 144, 211, 0.5);\n  border: none;\n  background-size: 3vw;\n  background-position: left;\n}\n\n.previewCarrierV,\n.previewpatrolBoatV,\n.previewBattleshipV,\n.previewDestroyerV,\n.previewSubmarineV{\n    background-color: rgba(0, 144, 211, 0.5);\n    border: none;\n    background-size: 3vw;\n    background-position: top;\n}\n\n.previewCarrier {\n  width: 500%;\n}\n\n.previewBattleship {\n  width: 400%;\n}\n\n.previewDestroyer {\n  width: 300%;\n}\n\n.previewSubmarine {\n  width: 300%;\n}\n\n.previewpatrolBoat {\n  width: 200%;\n}\n\n.previewCarrierV {\n  height: 500%;\n}\n\n.previewBattleshipV {\n  height: 400%;\n}\n\n.previewDestroyerV {\n  height: 300%;\n}\n\n.previewSubmarineV {\n  height: 300%;\n}\n\n.previewpatrolBoatV {\n  height: 200%;\n}\n"],sourceRoot:""}]);const f=h},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var t="",a=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),a&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=e(r),a&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(e,t,a,n,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);a&&o[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),n&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=n):p[4]="".concat(n)),r.push(p))}},r}},667:e=>{e.exports=function(e,r){return r||(r={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),r.hash&&(e+=r.hash),/["'() \t\n]|(%20)/.test(e)||r.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var r=e[1],t=e[3];if(!t)return r;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(n," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[r].concat(o).concat([i]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function t(e){for(var t=-1,a=0;a<r.length;a++)if(r[a].identifier===e){t=a;break}return t}function a(e,a){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],l=a.base?c[0]+a.base:c[0],p=i[l]||0,d="".concat(l," ").concat(p);i[l]=p+1;var u=t(d),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)r[u].references++,r[u].updater(A);else{var h=n(A,a);a.byIndex=s,r.splice(s,0,{identifier:d,updater:h,references:1})}o.push(d)}return o}function n(e,r){var t=r.domAPI(r);return t.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;t.update(e=r)}else t.remove()}}e.exports=function(e,n){var i=a(e=e||[],n=n||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=t(i[o]);r[s].references--}for(var c=a(e,n),l=0;l<i.length;l++){var p=t(i[l]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}i=c}}},569:e=>{var r={};e.exports=function(e,t){var a=function(e){if(void 0===r[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}r[e]=t}return r[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,t)=>{e.exports=function(e){var r=t.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(t){!function(e,r,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var n=void 0!==t.layer;n&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,n&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(a,e,r.options)}(r,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}},538:(e,r,t)=>{e.exports=t.p+"e85a1e3622aba08c2164.png"},334:(e,r,t)=>{e.exports=t.p+"7c399499f221416f0bf1.png"},850:(e,r,t)=>{e.exports=t.p+"037b182407bb24090402.png"},752:(e,r,t)=>{e.exports=t.p+"2d06fafb93054cad8896.png"},330:(e,r,t)=>{e.exports=t.p+"384d18ab7174913c1ea6.png"}},r={};function t(a){var n=r[a];if(void 0!==n)return n.exports;var i=r[a]={id:a,exports:{}};return e[a](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var a in r)t.o(r,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:r[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var r=t.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var a=r.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),r=t.n(e),a=t(795),n=t.n(a),i=t(569),o=t.n(i),s=t(565),c=t.n(s),l=t(216),p=t.n(l),d=t(589),u=t.n(d),A=t(426),h={};h.styleTagTransform=u(),h.setAttributes=c(),h.insert=o().bind(null,"head"),h.domAPI=n(),h.insertStyleElement=p(),r()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;const g=(e,r)=>{const t=Array(r);for(let e=0;e<t.length;e++)t[e]={position:e,status:"good"};const a=t;return{title:e,length:r,shipHealth:a,hit:e=>{a[e].status="hit"},isSunk:()=>a.every((e=>{if("hit"==e.status)return!0}))}},m=()=>{const e=Array(100);for(let r=0;r<e.length;r++){let t=r,a=r;const n=Math.floor(r/10);r>9&&(t=r-10*n),r>0&&(a=n),e[r]={occupied:"no",attacked:"no",X:t,Y:a}}const r=e=>{for(let r=0;r<e.shipHealth.length;r++)e.shipHealth[r]={position:r,status:"good"}},t=g("carrier",5),a=g("battleship",4),n=g("destroyer",3),i=g("submarine",3),o=g("patrolBoat",2);return{gameBoard:e,carrier:t,battleship:a,destroyer:n,submarine:i,patrolBoat:o,placeShip:(r,t)=>{const a=e.slice(t,t+r.length);if(!0!==a.every((e=>{if(e.Y===a[0].Y)return!0}))||!0!==(()=>{if(a.length===r.length)return!0})()||!0!==a.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";r.shipHealth.forEach((e=>e.occupied=r)),e.splice(t,r.length,...r.shipHealth)},placeShipVertical:(r,t)=>{const a=Array(r.length);let n=t;for(let r=0;r<a.length;r++)a[r]=e[n],n+=10;const i=a;if(!0!==i.every((e=>void 0!==e))||!0!==i.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";r.shipHealth.forEach((e=>e.occupied=r));for(let a=0;a<r.shipHealth.length;a++)t<=99&&(e[t]=r.shipHealth[a],t+=10)},receiveAttack:r=>{if("no"===e[r].attacked)e[r].attacked="yes";else{if("yes"===e[r].attacked)return!1;if("no"===e[r].occupied||"good"!==e[r].status)return!1;{const t=e[r].position;e[r].occupied.hit(t)}}},gameOverCheck:()=>!0===t.isSunk()&&!0===a.isSunk()&&!0===n.isSunk()&&!0===i.isSunk()&&!0===o.isSunk(),reset:()=>{for(let r=0;r<e.length;r++){let t=r,a=r;const n=Math.floor(r/10);r>9&&(t=r-10*n),r>0&&(a=n),e[r]={occupied:"no",attacked:"no",X:t,Y:a}}r(t),r(a),r(n),r(i),r(o)},resetShips:r}},v=(()=>{const e=m(),r=r=>e.gameBoard.filter((e=>e.occupied===r)).length>0;let t=!1;return{gameBoard:e,placeShip:a=>{if(!1===t)!0!==r(e.carrier)?e.placeShip(e.carrier,a):!0!==r(e.battleship)?e.placeShip(e.battleship,a):!0!==r(e.destroyer)?e.placeShip(e.destroyer,a):!0!==r(e.submarine)?e.placeShip(e.submarine,a):!0!==r(e.patrolBoat)&&e.placeShip(e.patrolBoat,a);else if(!0===t)if(!0!==r(e.carrier))e.placeShipVertical(e.carrier,a);else if(!0!==r(e.battleship))e.placeShipVertical(e.battleship,a);else if(!0!==r(e.destroyer))e.placeShipVertical(e.destroyer,a);else if(!0!==r(e.submarine))e.placeShipVertical(e.submarine,a);else{if(!0===r(e.patrolBoat))return;e.placeShipVertical(e.patrolBoat,a)}},attack:(e,r)=>!1!==e.receiveAttack(r),checkExisting:r,goVertical:()=>{t=!0!==t}}})(),b=(()=>{const e=m(),r=r=>e.gameBoard.filter((e=>e.occupied===r)).length>0,t=e=>Math.floor(Math.random()*e),a=(t,a)=>{let n=a;if(0===n)if(!0!==r(e.carrier))e.placeShip(e.carrier,t);else if(!0!==r(e.battleship))e.placeShip(e.battleship,t);else if(!0!==r(e.destroyer))e.placeShip(e.destroyer,t);else if(!0!==r(e.submarine))e.placeShip(e.submarine,t);else{if(!0===r(e.patrolBoat))return!1;e.placeShip(e.patrolBoat,t)}if(1===n)if(!0!==r(e.carrier))e.placeShipVertical(e.carrier,t);else if(!0!==r(e.battleship))e.placeShipVertical(e.battleship,t);else if(!0!==r(e.destroyer))e.placeShipVertical(e.destroyer,t);else if(!0!==r(e.submarine))e.placeShipVertical(e.submarine,t);else{if(!0===r(e.patrolBoat))return!1;e.placeShipVertical(e.patrolBoat,t)}};let n=!0;const i=(e,r)=>{n=!1===e.receiveAttack(r)};return{gameBoard:e,randomPlaceShip:()=>{for(;!1===r(e.patrolBoat);)a(t(100),t(2))},randomAttack:e=>{do{i(e,t(100))}while(!0===n)}}})(),B=(()=>{const e=document.querySelector(".container"),r=document.createElement("div");r.classList.add("gameBoard");const t=document.createElement("div");t.classList.add("gameBoard2");const a=(e,r)=>{for(let t=0;t<e.gameBoard.length;t++){const a=r.querySelector(`[data="${t}"]`);e.gameBoard[t].occupied===e.carrier&&a.classList.add("carrier"),e.gameBoard[t].occupied===e.battleship&&a.classList.add("battleship"),e.gameBoard[t].occupied===e.destroyer&&a.classList.add("destroyer"),e.gameBoard[t].occupied===e.submarine&&a.classList.add("submarine"),e.gameBoard[t].occupied===e.patrolBoat&&a.classList.add("patrolBoat")}},n=(e,r)=>{for(let t=0;t<e.gameBoard.length;t++){const a=r.querySelector(`[data="${t}"]`);"yes"===e.gameBoard[t].attacked?a.classList.add("missed"):"hit"===e.gameBoard[t].status&&a.classList.add("hit")}};let i=!1;return{render:(r,t)=>{for(let e=0;e<r.gameBoard.length;e++){const r=document.createElement("div");r.setAttribute("data",e),r.classList.add("square"),t.appendChild(r)}e.appendChild(t)},renderPlayerShips:a,renderHit:n,player1:r,player2:t,startGame:()=>{t.querySelectorAll(".square").forEach((e=>{const a=parseInt(e.getAttribute("data"));e.addEventListener("click",(()=>{!0!==v.gameBoard.gameOverCheck()&&!0!==b.gameBoard.gameOverCheck()&&!0===i&&!1!==v.attack(b.gameBoard,a)&&(n(b.gameBoard,t),b.randomAttack(v.gameBoard),n(v.gameBoard,r),!0===v.gameBoard.gameOverCheck()&&!0!==b.gameBoard.gameOverCheck()&&console.log("Draw"),!0===v.gameBoard.gameOverCheck()?console.log("you lose"):!0===b.gameBoard.gameOverCheck()&&console.log("you win"))}))}))},prepForBattle:()=>{const e=r.querySelectorAll(".square"),t=document.querySelector(".rotate");let n=!1;t.addEventListener("click",(()=>{v.goVertical(),n=!1===n})),e.forEach((e=>{const t=parseInt(e.getAttribute("data"));e.addEventListener("click",(()=>{v.placeShip(t),a(v.gameBoard,r),!0===v.checkExisting(v.gameBoard.patrolBoat)&&(i=!0)})),e.addEventListener("mouseenter",(()=>{!1===n?!0!==v.checkExisting(v.gameBoard.carrier)?e.classList.add("previewCarrier"):!0!==v.checkExisting(v.gameBoard.battleship)?e.classList.add("previewBattleship"):!0!==v.checkExisting(v.gameBoard.destroyer)?e.classList.add("previewDestroyer"):!0!==v.checkExisting(v.gameBoard.submarine)?e.classList.add("previewSubmarine"):!0!==v.checkExisting(v.gameBoard.patrolBoat)&&e.classList.add("previewpatrolBoat"):!0===n&&(!0!==v.checkExisting(v.gameBoard.carrier)?e.classList.add("previewCarrierV"):!0!==v.checkExisting(v.gameBoard.battleship)?e.classList.add("previewBattleshipV"):!0!==v.checkExisting(v.gameBoard.destroyer)?e.classList.add("previewDestroyerV"):!0!==v.checkExisting(v.gameBoard.submarine)?e.classList.add("previewSubmarineV"):!0!==v.checkExisting(v.gameBoard.patrolBoat)&&e.classList.add("previewpatrolBoatV"))})),e.addEventListener("mouseleave",(()=>{e.classList.remove("previewCarrier"),e.classList.remove("previewBattleship"),e.classList.remove("previewDestroyer"),e.classList.remove("previewSubmarine"),e.classList.remove("previewpatrolBoat"),e.classList.remove("previewCarrierV"),e.classList.remove("previewBattleshipV"),e.classList.remove("previewDestroyerV"),e.classList.remove("previewSubmarineV"),e.classList.remove("previewpatrolBoatV")}))}))},removeClass:(e,r)=>{for(let t=0;t<e.gameBoard.length;t++){const e=r.querySelector(`[data="${t}"]`);e.classList.remove("carrier"),e.classList.remove("battleship"),e.classList.remove("destroyer"),e.classList.remove("submarine"),e.classList.remove("patrolBoat"),e.classList.remove("hit"),e.classList.remove("missed")}},setReady:()=>{i=!1===i}}})();(()=>{const e=document.querySelector(".reset");return{play:()=>{B.render(v.gameBoard,B.player1),B.render(b.gameBoard,B.player2),B.prepForBattle(),b.randomPlaceShip(),B.startGame(),e.addEventListener("click",(()=>{b.gameBoard.reset(),v.gameBoard.reset(),B.setReady(),B.removeClass(b.gameBoard,B.player2),B.removeClass(v.gameBoard,B.player1),b.randomPlaceShip()}))}}})().play()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,