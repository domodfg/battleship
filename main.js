(()=>{"use strict";var e={426:(e,r,t)=>{t.d(r,{Z:()=>B});var n=t(537),a=t.n(n),o=t(645),i=t.n(o),c=t(667),s=t.n(c),l=new URL(t(538),t.b),p=new URL(t(334),t.b),d=new URL(t(850),t.b),u=new URL(t(330),t.b),h=new URL(t(752),t.b),f=i()(a()),A=s()(l),m=s()(p),g=s()(d),b=s()(u),v=s()(h);f.push([e.id,".container {\n  min-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.gameBoard {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 35vw;\n  aspect-ratio: 1/1;\n  border-top: 0.1px solid black;\n  border-left: 0.1px solid black;\n}\n\n.square {\n  border-right: 0.1px solid black;\n  border-bottom: 0.1px solid black;\n}\n\n.missed {\n    background-color: aquamarine;\n}\n\n.container .hit {\n    background-color: red;\n}\n\n.carrier {\n    background-image: url("+A+")\n}\n\n.battleship {\n    background-image: url("+m+");\n}\n\n.destroyer {\n    background-image: url("+g+");\n}\n\n.submarine {\n    background-image: url("+b+");\n}\n\n.patrolBoat {\n    background-image: url("+v+");\n}\n\n.carrier, .battleship, .destroyer, .submarine, .patrolBoat {\n    background-position: center;\n    background-size: 70%;\n    background-repeat: no-repeat;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,6BAA6B;EAC7B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,WAAW;EACX,iBAAiB;EACjB,6BAA6B;EAC7B,8BAA8B;AAChC;;AAEA;EACE,+BAA+B;EAC/B,gCAAgC;AAClC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI;AACJ;;AAEA;IACI,yDAAuC;AAC3C;;AAEA;IACI,yDAAmC;AACvC;;AAEA;IACI,yDAAsC;AAC1C;;AAEA;IACI,yDAA4C;AAChD;;AAEA;IACI,2BAA2B;IAC3B,oBAAoB;IACpB,4BAA4B;AAChC",sourcesContent:[".container {\n  min-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n\n.gameBoard {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: 35vw;\n  aspect-ratio: 1/1;\n  border-top: 0.1px solid black;\n  border-left: 0.1px solid black;\n}\n\n.square {\n  border-right: 0.1px solid black;\n  border-bottom: 0.1px solid black;\n}\n\n.missed {\n    background-color: aquamarine;\n}\n\n.container .hit {\n    background-color: red;\n}\n\n.carrier {\n    background-image: url(./aircraft-carrier.png)\n}\n\n.battleship {\n    background-image: url(./battleship.png);\n}\n\n.destroyer {\n    background-image: url(./cruise.png);\n}\n\n.submarine {\n    background-image: url(./submarine.png);\n}\n\n.patrolBoat {\n    background-image: url(./maritime-rescue.png);\n}\n\n.carrier, .battleship, .destroyer, .submarine, .patrolBoat {\n    background-position: center;\n    background-size: 70%;\n    background-repeat: no-repeat;\n}"],sourceRoot:""}]);const B=f},645:e=>{e.exports=function(e){var r=[];return r.toString=function(){return this.map((function(r){var t="",n=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),n&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=e(r),n&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(e,t,n,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);n&&i[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),r.push(p))}},r}},667:e=>{e.exports=function(e,r){return r||(r={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),r.hash&&(e+=r.hash),/["'() \t\n]|(%20)/.test(e)||r.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var r=e[1],t=e[3];if(!t)return r;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}},379:e=>{var r=[];function t(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function n(e,n){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],l=n.base?s[0]+n.base:s[0],p=o[l]||0,d="".concat(l," ").concat(p);o[l]=p+1;var u=t(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)r[u].references++,r[u].updater(h);else{var f=a(h,n);n.byIndex=c,r.splice(c,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function a(e,r){var t=r.domAPI(r);return t.update(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap&&r.supports===e.supports&&r.layer===e.layer)return;t.update(e=r)}else t.remove()}}e.exports=function(e,a){var o=n(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=t(o[i]);r[c].references--}for(var s=n(e,a),l=0;l<o.length;l++){var p=t(o[l]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}o=s}}},569:e=>{var r={};e.exports=function(e,t){var n=function(e){if(void 0===r[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}r[e]=t}return r[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:e=>{e.exports=function(e){var r=document.createElement("style");return e.setAttributes(r,e.attributes),e.insert(r,e.options),r}},565:(e,r,t)=>{e.exports=function(e){var r=t.nc;r&&e.setAttribute("nonce",r)}},795:e=>{e.exports=function(e){var r=e.insertStyleElement(e);return{update:function(t){!function(e,r,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,a&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(n,e,r.options)}(r,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)}}}},589:e=>{e.exports=function(e,r){if(r.styleSheet)r.styleSheet.cssText=e;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(e))}}},538:(e,r,t)=>{e.exports=t.p+"e85a1e3622aba08c2164.png"},334:(e,r,t)=>{e.exports=t.p+"7c399499f221416f0bf1.png"},850:(e,r,t)=>{e.exports=t.p+"037b182407bb24090402.png"},752:(e,r,t)=>{e.exports=t.p+"2d06fafb93054cad8896.png"},330:(e,r,t)=>{e.exports=t.p+"384d18ab7174913c1ea6.png"}},r={};function t(n){var a=r[n];if(void 0!==a)return a.exports;var o=r[n]={id:n,exports:{}};return e[n](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var r=t.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),r=t.n(e),n=t(795),a=t.n(n),o=t(569),i=t.n(o),c=t(565),s=t.n(c),l=t(216),p=t.n(l),d=t(589),u=t.n(d),h=t(426),f={};f.styleTagTransform=u(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=p(),r()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const A=(e,r)=>{const t=Array(r);for(let e=0;e<t.length;e++)t[e]={position:e,status:"good"};const n=t;return{title:e,length:r,shipHealth:n,hit:e=>{n[e].status="hit"},isSunk:()=>n.every((e=>{if("hit"==e.status)return!0}))}},m=()=>{const e=Array(100);for(let r=0;r<e.length;r++){let t=r,n=r;const a=Math.floor(r/10);r>9&&(t=r-10*a),r>0&&(n=a),e[r]={occupied:"no",attacked:"no",X:t,Y:n}}const r=e,t=A("carrier",5),n=A("battleship",4),a=A("destroyer",3),o=A("submarine",3),i=A("patrolBoat",2);return{gameBoard:r,carrier:t,battleship:n,destroyer:a,submarine:o,patrolBoat:i,placeShip:(e,t)=>{const n=r.slice(t,t+e.length);if(!0!==n.every((e=>{if(e.Y===n[0].Y)return!0}))||!0!==(()=>{if(n.length===e.length)return!0})()||!0!==n.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((r=>r.occupied=e)),r.splice(t,e.length,...e.shipHealth)},placeShipVertical:(e,t)=>{const n=Array(e.length);let a=t;for(let e=0;e<n.length;e++)n[e]=r[a],a+=10;const o=n;if(!0!==o.every((e=>void 0!==e))||!0!==o.every((e=>{if("no"===e.occupied)return!0})))return"invalid position";e.shipHealth.forEach((r=>r.occupied=e));for(let n=0;n<e.shipHealth.length;n++)t<=99&&(r[t]=e.shipHealth[n],t+=10)},receiveAttack:e=>{if("no"===r[e].attacked)r[e].attacked="yes";else{if("yes"===r[e].attacked)return!1;if("no"===r[e].occupied||"good"!==r[e].status)return!1;{const t=r[e].position;r[e].occupied.hit(t)}}},gameOverCheck:()=>!0===t.isSunk()&&!0===n.isSunk()&&!0===a.isSunk()&&!0===o.isSunk()&&!0===i.isSunk()}},g=(()=>{const e=m(),r=r=>e.gameBoard.filter((e=>e.occupied===r)).length>0;return{active:!0,gameBoard:e,placeShip:(t,n)=>{let a=n;if("horizontal"===a)if(!0!==r(e.carrier))e.placeShip(e.carrier,t);else if(!0!==r(e.battleship))e.placeShip(e.battleship,t);else if(!0!==r(e.destroyer))e.placeShip(e.destroyer,t);else if(!0!==r(e.submarine))e.placeShip(e.submarine,t);else{if(!0===r(e.patrolBoat))return;e.placeShip(e.patrolBoat,t)}if("vertical"===a)if(!0!==r(e.carrier))e.placeShipVertical(e.carrier,t);else if(!0!==r(e.battleship))e.placeShipVertical(e.battleship,t);else if(!0!==r(e.destroyer))e.placeShipVertical(e.destroyer,t);else if(!0!==r(e.submarine))e.placeShipVertical(e.submarine,t);else{if(!0===r(e.patrolBoat))return;e.placeShipVertical(e.patrolBoat,t)}},attack:(e,r)=>{e.receiveAttack(r)}}})(),b=(()=>{const e=m(),r=r=>e.gameBoard.filter((e=>e.occupied===r)).length>0,t=e=>Math.floor(Math.random()*e),n=(t,n)=>{let a=n;if(0===a)if(!0!==r(e.carrier))e.placeShip(e.carrier,t);else if(!0!==r(e.battleship))e.placeShip(e.battleship,t);else if(!0!==r(e.destroyer))e.placeShip(e.destroyer,t);else if(!0!==r(e.submarine))e.placeShip(e.submarine,t);else{if(!0===r(e.patrolBoat))return!1;e.placeShip(e.patrolBoat,t)}if(1===a)if(!0!==r(e.carrier))e.placeShipVertical(e.carrier,t);else if(!0!==r(e.battleship))e.placeShipVertical(e.battleship,t);else if(!0!==r(e.destroyer))e.placeShipVertical(e.destroyer,t);else if(!0!==r(e.submarine))e.placeShipVertical(e.submarine,t);else{if(!0===r(e.patrolBoat))return!1;e.placeShipVertical(e.patrolBoat,t)}};let a=!0;const o=(e,r)=>{a=!1===e.receiveAttack(r)};return{active:!0,gameBoard:e,randomPlaceShip:()=>{for(;!1===r(e.patrolBoat);)n(t(100),t(2))},randomAttack:e=>{do{o(e,t(100)),console.log("loop")}while(!0===a)}}})(),v=(()=>{const e=document.querySelector(".container"),r=document.createElement("div");return r.classList.add("gameBoard"),{render:t=>{for(let e=0;e<t.length;e++){const t=document.createElement("div");t.setAttribute("id",e),t.classList.add("square"),r.appendChild(t)}e.appendChild(r)},renderPlayerShips:e=>{for(let r=0;r<e.gameBoard.length;r++){const t=document.getElementById(r);e.gameBoard[r].occupied===e.carrier&&t.classList.add("carrier"),e.gameBoard[r].occupied===e.battleship&&t.classList.add("battleship"),e.gameBoard[r].occupied===e.destroyer&&t.classList.add("destroyer"),e.gameBoard[r].occupied===e.submarine&&t.classList.add("submarine"),e.gameBoard[r].occupied===e.patrolBoat&&t.classList.add("patrolBoat")}},renderHit:e=>{for(let r=0;r<e.length;r++){const t=document.getElementById(r);"yes"===e[r].attacked?t.classList.add("missed"):"hit"===e[r].status&&t.classList.add("hit")}}}})();g.placeShip(10,"horizontal"),g.placeShip(20,"horizontal"),g.placeShip(31,"vertical"),g.placeShip(42,"vertical"),g.placeShip(55,"horizontal"),b.randomPlaceShip(),g.gameBoard.receiveAttack(9),b.randomAttack(g.gameBoard),v.render(g.gameBoard.gameBoard),v.renderPlayerShips(g.gameBoard),v.renderHit(g.gameBoard.gameBoard),console.log(g.gameBoard.gameBoard)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,